<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password"  type="password"/>
    <button onclick="login()">Login</button>
    <script>

        //checks if URL sent by server is not an error message
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        async function login() {
            let loginURL = "{{ url_for('login_the_user') }}";   //gives the URL to post the login request to

            let password = $("#password").val();    //grabbing the password entered in by the user
            password = password.replace(/\s/g, ''); //removing all the white spaces
            password = password.hashCode();         //hashing the password

            //escapes the input to protect against XSS attacks
            let username = encodeURIComponent($("#username").val());
            password = encodeURIComponent(password);

            //using axios.post to pass the username and password to the server
            let res = await axios.post(loginURL, {
                username: username,
                password: password
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            //creates a passphrase by concatenating the password and username, ensures that the passphrase is unique to the user, then hashes for security
            var revpas = password
            var user = username
            var passphrase = revpas + user;
            //passphrase = String(passphrase.hashCode());

            const privkey = cryptico.generateRSAKey(passphrase, 2048);  //generates a private key using the passphrase
            const serial_privkey = exportRSAKey(privkey);   //exports the private key to a string
            await storeRSAKey(serial_privkey, passphrase);  //stores the private key in the IndexedDB
            await addData(passphrase);            //adds the passphrase to the IndexedDB
            window.open(res.data, "_self")   // redirects to the URL (ie. res.data) sent by the server would in this case would be home
        }

    </script>
{% endblock %}