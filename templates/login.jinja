<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password"  type="password"/>
    <button onclick="login()">Login</button>
    <script>

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_the_user')}}"
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_the_user') }}";

            let password = $("#password").val();
            password = password.replace(/\s/g, '');
            password = password.hashCode();


            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            let res = await axios.post(loginURL, {
                username: $("#username").val(),
                password: password
            });


            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }
            var revpas = $("#password").val();
            var user = $("#username").val();
            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab

            //const privkey = getPrivateKey();
            var passphrase = revpas + user;
            //passphrase = String(passphrase.hashCode());
            const privkey = cryptico.generateRSAKey(passphrase, 2048);
            const serial_privkey = exportRSAKey(privkey);
            await storeRSAKey(serial_privkey, passphrase);
            await addData(passphrase);
            window.open(res.data, "_self")
        }

    </script>
{% endblock %}
