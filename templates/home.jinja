<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
<style>
    
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f4;
    }
    
    .main {
        display: flex;
        justify-content: space-around;
        margin: 20px;
    }
    
    .Chat {
        flex: 5; /* Takes up 3/4 of the space */
        margin-right: 20px;
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.15);
    }
    
    .Friends {
        flex: 1; /* Takes up 1/4 of the space */
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.15);
    }
    
    #message_box {
        border: 1px solid #ddd;
        height: 400px;
        width: 100%;
        overflow: auto;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
    }
    
    .text {
        margin: 5px 0;
    }
    
    nav {
        display: flex;
        justify-content: flex-end;
        background-color: #333;
        color: #fff;
        padding: 0.2em 1em;
        font-size: 1.5em;
    }
    
    button {
        background-color: #f44336; 
        border: none;
        color: white;
        padding: 10px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
    }

    button:hover {
        background-color: #d32f2f; 
        color: #fff;
    }

    .receiver {
        font-size: 16px;
        padding: 10px;
    }
    
    h1 {
        text-align: left;
        padding-left: 20px;
        color: blue;
        margin: 20px 0;
    }

    nav ol li {
        display: inline-block;
        margin-right: 20px;
    }


</style>

<!--Navbar, you'll see the username here-->
<nav>
    <ol>
        <li><b>Username:</b>  {{ username }} </li>
        <li><button onclick="logout()">Logout</button></li>
    </ol>
</nav>

<h1>Messaging App </h1>
<main class="main">
    
    <div class="Chat">
        <!-- The messages are displayed here -->
        <section id="message_box"></section>

        <!-- These part ideally should be a form element, 
        but I wrote this code a year ago and I don't want to break anything...-->
        <section id="chat_box">
            <p class="text">Chat with: </p>
            <input class="receiver" id="receiver" placeholder="username">
            <!-- MDN says its bad practice to use the onclick attribute,
            but we're using it anyways coz its easy :)-->
            <button onclick="join_room()">Chat</button>
        </section>

        <!-- The (message) input box is set to display: none initially, 
        this means the input box is "invisible" initially-->
        <section id="input_box" style="display: none" >
            <p class="text">Message: </p>
            <input id="message" placeholder="message">
            <button onclick="send()">Send</button>
            <button onclick="leave()">Leave Room</button>
        </section>
    </div>

    <div class="Friends">  
        <h2>Friends List</h2>
        <ul>
            <li>Friend 1</li>
            <li>Friend 2</li>
            <li>Friend 3</li>
            <li>Friend 4</li>
            <li>Friend 5</li>
        </ul>
    </div>

</main>


<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;
    generateAndSendKeyPair();

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (username, encryptedMsg) => {
        decryptMessage(encryptedMsg)
            .then(decryptedMessage => {
                add_message(username + decryptedMessage);
            });
    });

    socket.on("incoming_sys", (msg, color="black") => {
        console.log("hi");
        add_message(friends + msg, color);
        console.log("success");
    })


    const dbName = "cryptoKeysDB";
    const storeName = "keys";

    function initDB() {
        return new Promise((resolve, reject) => {
            const openRequest = indexedDB.open(dbName, 1);

            openRequest.onupgradeneeded = function(event) {
                const db = event.target.result;
                db.createObjectStore(storeName, { keyPath: "id" });
            };

            openRequest.onsuccess = function(event) {
                resolve(event.target.result);
            };

            openRequest.onerror = function(event) {
                console.error("IndexedDB error:", openRequest.error);
                reject(openRequest.error);
            };
        });
    }

    async function storePrivateKey(privateKey) {
        const db = await initDB();

        return new Promise((resolve, reject) => {
            const transaction = db.transaction([storeName], "readwrite");
            const store = transaction.objectStore(storeName);
            const request = store.put({ id: "privateKey", key: privateKey });

            request.onsuccess = function() {
                resolve();
            };

            request.onerror = function(event) {
                console.error("Error storing private key:", request.error);
                reject(request.error);
            };
        });
    }

    async function getPrivateKey() {
        const db = await initDB();

        return new Promise((resolve, reject) => {
            const transaction = db.transaction([storeName], "readonly");
            const store = transaction.objectStore(storeName);
            const request = store.get("privateKey");

            request.onsuccess = function() {
                if (request.result) {
                    resolve(request.result.key);
                } else {
                    reject("No private key found");
                }
            };

            request.onerror = function(event) {
                console.error("Error retrieving private key:", request.error);
                reject(request.error);
            };
        });
    }

    async function generateAndSendKeyPair() {
        const keyPair = await window.crypto.subtle.generateKey(
            { name: "RSA-OAEP", modulusLength: 2048, publicExponent: new Uint8Array([1, 0, 1]), hash: { name: "SHA-256" } },
            true,
            ["encrypt", "decrypt"]
        );

        await storePrivateKey(keyPair.privateKey);

        const exportedPublicKey = await window.crypto.subtle.exportKey("spki", keyPair.publicKey);
        const publicKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(exportedPublicKey)));


        await fetch(`/api/users/${username}/set_public_key`, {  // Adjust this URL as needed
            method: "PUT",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ public_key: publicKeyBase64 })
        });

        // Store the private key securely, e.g., in IndexedDB
    }

    async function encryptMessage(publicKeyBase64, message) {
        const publicKeyBuffer = Uint8Array.from(atob(publicKeyBase64), c => c.charCodeAt(0));
        const publicKey = await window.crypto.subtle.importKey("spki", publicKeyBuffer, { name: "RSA-OAEP", hash: { name: "SHA-256" } }, true, ["encrypt"]);

        const encrypted = await window.crypto.subtle.encrypt({ name: "RSA-OAEP" }, publicKey, new TextEncoder().encode(message));
        return btoa(String.fromCharCode(...new Uint8Array(encrypted)));  // Return Base64-encoded encrypted message
    }

    async function decryptMessage(encryptedMessageBase64) {
        const privateKey = await getPrivateKey();
        if (!privateKey) {
            console.error('Private key not found');
            throw new Error('Private key not found');
        }

        if (!encryptedMessageBase64) {
            console.error('Encrypted message is undefined or null');
            throw new Error('Encrypted message is undefined or null');
        }

        // Ensure it's a string
        encryptedMessageBase64 = String(encryptedMessageBase64);

        // Handle URL-safe Base64 and padding
        const safeBase64 = encryptedMessageBase64.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
        const paddedBase64 = safeBase64.padEnd(Math.ceil(safeBase64.length / 4) * 4, '=');

        console.log('Encrypted Message Base64:', encryptedMessageBase64);

        let encryptedMessageBuffer;
        try {
            encryptedMessageBuffer = Uint8Array.from(atob(paddedBase64), c => c.charCodeAt(0));
        } catch (e) {
            console.error('Error decoding Base64 string:', e);
            throw new Error('Failed to decode Base64 string. Ensure the encrypted message is correctly encoded.');
        }

        let decrypted;
        try {
            decrypted = await window.crypto.subtle.decrypt({ name: "RSA-OAEP" }, privateKey, encryptedMessageBuffer);
        } catch (e) {
            console.error('Error decrypting message:', e);
            throw new Error('Failed to decrypt message. Ensure the private key matches the public key used for encryption.');
        }

        return new TextDecoder().decode(decrypted);
    }

    async function fetchPublicKey(receiver) {
        try {
            const response = await fetch(`/api/users/${receiver}/get_public_key`, {
                method: "GET"
            });
            /*if (!response.ok) {
                throw new Error(`Failed to fetch public key for user: ${receiver}`);
            }*/
            const data = await response.json();
            console.log(data);
            return data.pubkey;  // Assuming the backend sends the public key in this field
        } catch (error) {
            console.error("Fetching public key failed:", error);
        }
    }
    
    // we'll send the message to the server by emitting a "send" event
    async function send() {
        let receiver = $("#receiver").val();
        let message = $("#message").val();
        $("#message").val("");

        try {
            const receiverPublicKey = await fetchPublicKey(receiver);
            if (!receiverPublicKey) {
                console.error("No public key found for receiver:", receiver);
                return;  // Exit the function if no public key was fetched
            }
        add_message(username + ": " + message)
            const encryptedMessage = await encryptMessage(receiverPublicKey, message);
            socket.emit("send", username, encryptedMessage, room_id);
        } catch (error) {
            console.error("Error in sending message:", error);
        }
    }

    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // Logout function
    function logout() {
        // Redirect to the logout route
        window.location.href = "/logout";
    }
    
</script>
{% endblock %}
