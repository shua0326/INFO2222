<!--
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}

{% block content %} 
<style>

    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: darkblue;
    }

    .main {
        display: flex;
        justify-content: space-between;
        margin: 50px;
        height: 700px;
    }

    .Chat {
        flex: 4; /* Takes up 3/4 of the space */
        margin: 0px 30px;
        background-color: #fff;
        padding: 30px 30px;
        border-radius: 10px;
        box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.15);
    }

    #Small_box {
        flex: 1; /* Takes up 1/4 of the space */
        background-color: #fff;
        padding: 20px;
        margin: 0px 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.15);
    }

    #message_box {
        border: 1px solid #ddd;
        height: 500px;
        width: 95%;
        border-radius: 5px;
        justify-self: center;
        padding: 10px 10px;
    }

    .text {
        margin: 5px 0;
    }

    nav {
        display: flex;
        justify-content: space-between;
        background-color: #333;
        color: #fff;
        padding: 0.2em 1em;
        font-size: 1.5em;
        text-align: center;
    }

    button {
        background-color: #f44336;
        border: none;
        color: white;
        padding: 10px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
    }

    button:hover {
        background-color: #d32f2f;
        color: #fff;
    }

    .receiver {
        font-size: 16px;
        padding: 10px;
    }

    h1 {
        text-align: left;
        color: white;
        margin: 20px 0;
        margin-left: 70px;
    }

    nav ol li {
        display: inline-block;
        margin-right: 20px;

    }

    .Friends_button {
        background: #333;
        color : white;
        margin: 10px 0;
    }

    .online-dot {
        height: 10px;
        width: 10px;
        background-color: #4CAF50; /* green */
        border-radius: 50%;
        display: inline-block;
    }

    .List_friend_button {
        background-color: white;
        color: black;
        border: none;
        padding: 10px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        border-radius: 4px;
    }

    .List_friend_button:hover {
        background-color: white;
        color: black;
    }

    .Cancel_button {
        background-color: #bf1c1c;
        color: white;
        margin: 10px 0;
    }

    .Cancel_button:hover {
        background-color: #b01a1a;
        color: white;
    }

    .Accept_button {
        background-color: #4CAF50;
        color: white;
        margin: 10px 0;
    }

    .Accept_button:hover {
        background-color: #3f9643;
    }

    .button-container {
        display: block;
        margin: 10px 0;
    }

    a {
        background-color: #f44336;
        border: none;
        color: white;
        padding: 10px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
    }
    
    a:hover {
        background-color: #d32f2f;
    }

</style>

<nav>
    <h1>Messaging App </h1>
    <ol>
        <li><b>Username:</b>  {{ username }} - {{user_role}}</li>
        <li><button onclick="(async () => { await logout(); })()">Logout</button></li>
        <li><a href={{ url_for('articles') }}>Articles</a></li>
        {% if user_role != "Student" %}
            <li><button onclick="(async () => { mute_user('mute'); })()">Mute User</button></li>
            <li><button onclick="(async () => { mute_user('unmute'); })()">Unmute User</button></li>
        {% endif %}
    </ol>
</nav>

<main class="main">
    <div class="Chat">
        <h3><div id="chatting_to">Chatting to: No one at the moment !</div></h3>
        <section id="message_box"></section>
        <section id="input_box" style="display: none" >
            <p class="text">Message: </p>
            <input class="receiver" id="message" placeholder="message" oninput="checkInput()">
            <button id="sendButton" onclick="send()" disabled>Send</button>
            <button onclick="leave()">Leave Room</button>
            <button id="add_friend_button" onclick="add_friend_to_group()" style="display: none">Add friend</button>
        </section>
        <style>
            button:disabled {
                background-color: #010000;
                color: #666666;
            }
        </style>

    </div>

    <div class="Incoming_Friends_Request" id="Small_box"> </div>

    <div class="Outgoing_Friends_Request" id="Small_box"> </div>

    <div class="Friends" id="Small_box"> </div>

    <div class="Group_chats" id="Small_box"> </div>

</main>

<script src="/static/js/libs/jschmac.bundle.js"></script>
<script src="/static/js/libs/socket.io.min.js"></script>
<script>

    let current_receiver = "";
    let is_talking = false;
    let is_group_chat = false;

    // when the user presses the "Enter" key inside of the "message box",
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $(document).ready(() => {
        checkInput();
        $("#message").on("input change paste", checkInput);
    });

    // Here's the Socket IO part of the code
    let username = "{{ username }}";

    // initializes the socket
    const socket = io();

    //unlocks the send button when the input box is filled with text
    function checkInput() {
        var message = document.getElementById('message').value;
        if (message.trim() != '') {
            document.getElementById('sendButton').disabled = false;
        } else {
            document.getElementById('sendButton').disabled = true;
        }
    }

    socket.on('update', function(data) {
        // Assuming you have functions to update HTML with new data
        updateFriendsList(data.friends);
        updateOutgoingRequests(data.outgoing);
        updateIncomingRequests(data.incoming);
        updateGroupChats(data.group_chats);
    });

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", async (user1, encryptedMsg, mac) => {  // Mark this function as async
      
        if (user1 == username) {   // Ensure the message is meant for this user
            try {
                const decryptedMessage = await decryptMessage(encryptedMsg);    //Decrypts the message using the user's private key
                if (typeof decryptedMessage === "string" && decryptedMessage.trim() !== "") {   //ensuring the string is in the right format
                    let mac_bytes = base64ToUint8Array(mac);

                    let status = await verify_hmac(decryptedMessage, mac_bytes); // Await HMAC verification
                    //Only add the message if the MAC verification passes
                    if (status) {
                        await add_message_sys(decryptedMessage);
                    } else {
                        console.log("MAC verification failed.");
                    }
                }
            } catch (error) {
                console.error("Decryption failed:", error); // Handle decryption errors
                await add_message_sys(`${user1}: [Message could not be decrypted]`);
            }
        }
    });

    socket.on("incoming_sys_init", async (encrypted_msg, color="black") => {

        console.log(encrypted_msg)


        
        if (!encrypted_msg) {
            return;
        }

     

        const encrypted_convo = encrypted_msg.split("+++").filter(msg => msg.trim() !== "");  // Split and filter out empty results
        const decrypted_msgs = [];
  

        //decrypting conversation messages
        for (let msg of encrypted_convo) {
            if (msg) {  // Check if the message is not undefined or empty
          
                const decrypted = await decryptMessage(msg);
               
                if (decrypted) {
                    if (decrypted.trim() !== "" && decrypted.trim() != "\n") {  // Ensure the decrypted message isn't empty or just whitespace
                        decrypted_msgs.push(decrypted);  // Add it to the array
                    }
                }

            }
        }

     

        //joins the decrypted messages into one string
        let decrypted_convo = '';
        if (decrypted_msgs.length > 0) {
            decrypted_convo = decrypted_msgs.join("\n");
        }
        //conversation history is added to the global conversation

        await add_message_sys(decrypted_convo);

    });

    socket.on("incoming_sys_disconnect", () => {
            leave();
            console.error("You have been disconnected.");
        })


    async function encryptMessage(publicKey, message) {
        const encrypted = await cryptico.encrypt(message, publicKey);
        return encrypted;  // Return Base64-encoded encrypted message
    }

    async function decryptMessage(encryptedMessage) {
        const passphrase = await getData();
        const serial_privkey = await getRSAKey(passphrase);
        const privateKey = importRSAKey(serial_privkey);
   



        if (!encryptedMessage) {
            console.log('Encrypted message is undefined or null');
            throw new Error('Encrypted message is undefined or null');
        }



        let decrypted;
        try {
            decrypted = await cryptico.decrypt(encryptedMessage, privateKey);
            
        } catch (e) {
            console.log('Error decrypting message:', e);
            throw new Error('Failed to decrypt message. Ensure the private key matches the public key used for encryption.');
        }

        if(decrypted.plaintext != undefined && decrypted.plaintext != ""){
            return decrypted.plaintext;
        }
    }

    async function fetchUserid(user) {
        try {
            const response = await fetch(`/api/users/${user}/get_user_id`, {
                method: "GET"
            });
            /*if (!response.ok) {
                throw new Error(`Failed to fetch public key for user: ${receiver}`);
            }*/
            const data = await response.json();
            return data.user_id;  // Assuming the backend sends the public key in this field
        } catch (error) {
            console.error("Fetching user id failed:", error);
        }
    }

    async function fetchPublicKey(receiver) {
        try {
            const response = await fetch(`/api/users/${receiver}/get_public_key`, {
                method: "GET"
            });
            const data = await response.json();
            return data.pubkey;  // Assuming the backend sends the public key in this field
        } catch (error) {
            console.error("Fetching public key failed:", error);
        }
    }

    function arrayBufferToBase64(buffer) {
        let binary = '';
        let bytes = new Uint8Array(buffer);
        let len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }

    function base64ToUint8Array(base64) {
        var binaryString = window.atob(base64); // Decode base64 to binary string
        var len = binaryString.length;
        var bytes = new Uint8Array(len); // Create a new Uint8Array with the same length as the binary string
        for (var i = 0; i < len; i++) {
            bytes[i] = binaryString.charCodeAt(i); // Convert each character to a byte
        }
        return bytes;
    }

    async function send() {
        let receiver = current_receiver;    //Gets the current receiver
        let message = $("#message").val();  // Get the message from the input box

        $("#message").val("");  // Clear the message input early for a better user experience
        checkInput();

        let formattedMessage = username + ": " + message;

        await add_message_sys(formattedMessage);  // Add the message to the user's chat window locally for immediate feedback

        if (is_group_chat) {
            const chat_users = await fetchchatusernames();
            for (let user of chat_users) {
                try {
                    //grabs the receiver's public key
                    const receiverPublicKey = await fetchPublicKey(user);

                    if (!receiverPublicKey) {
                        console.error("No public key found for receiver:", user);
                        alert("Cannot find receiver's public key."); // Notifies the user if the public key is not found
                        return;  // Exit the function if no public key was fetched
                    }

                       //formats message to include the sender's name

                    let mac = await generate_hmac(formattedMessage);  // Generate HMAC for the actual message to be sent
                    let encryptedMessage = await encryptMessage(receiverPublicKey, formattedMessage);  // Encrypt the full formatted message
                    let macbase = arrayBufferToBase64(mac);

                    if (user != username) {
                        socket.emit("send", user, encryptedMessage.cipher, macbase, function(response) {
                            // This function will be called with the server's response
                            if (response.error_code) {
                                alert(response.error_message + " - Error code: " + response.error_code);
                                return;
                            }
                            else {
                                //do nothing
                            }
                        });
                    }
                    socket.emit("send_convo", encryptedMessage.cipher, user, current_receiver, is_group_chat);



                } catch (error) {
                    console.error("Error in sending message:", error);
                    alert("Failed to send the message."); // Provide feedback on failure
                }
            }
        }
        else {
            try {
                //grabs the receiver's public key
                const receiverPublicKey = await fetchPublicKey(receiver);
                console.log(receiverPublicKey);
                const senderPublicKey = await fetchPublicKey(username);

                if (!receiverPublicKey) {
                    console.error("No public key found for receiver:", receiver);
                    alert("Cannot find receiver's public key."); // Notifies the user if the public key is not found
                    return;  // Exit the function if no public key was fetched
                }

                let mac = await generate_hmac(formattedMessage);  // Generate HMAC for the actual message to be sent
                let encryptedMessage_receiver = await encryptMessage(receiverPublicKey, formattedMessage);  // Encrypt the full formatted message
                let encryptedMessage_sender = await encryptMessage(senderPublicKey, formattedMessage);  // Encrypt the full formatted message
                let macbase = arrayBufferToBase64(mac);


                // Emit the message over the sockets
                socket.emit("send", receiver, encryptedMessage_receiver.cipher, macbase);
                socket.emit("send_convo", encryptedMessage_sender.cipher, username, current_receiver, is_group_chat);
                socket.emit("send_convo", encryptedMessage_receiver.cipher, current_receiver, username, is_group_chat);

            } catch (error) {
                console.error("Error in sending message:", error);
                alert("Failed to send the message."); // Provide feedback on failure
            }
        }
    }

    // Function to encode strings to Uint8Array
    function encodeString(input) {
        const encoder = new TextEncoder();
        return encoder.encode(input);
    }

    // Function to generate HMAC
    async function generate_hmac(message) {
        if (is_group_chat) {
            const chat_ids = await fetchchatids();
            const sorted_chat_ids = chat_ids.sort();
            const key = sorted_chat_ids.join("");
            const encodedKey = encodeString(key);
            const encodedMessage = encodeString(message);

            // Assume HMAC key needs to be 32 bytes; adjust or pad as needed
            const hmacKey = new Uint8Array(32);
            hmacKey.set(encodedKey.slice(0, 32));

            // Compute HMAC
            return window.jschmac.compute(hmacKey, encodedMessage, "SHA-256");
        }
        else {
            const receiver = current_receiver;
            const user_id = await fetchUserid(username);
            const receiver_id = await fetchUserid(receiver);
            const key = `${Math.max(user_id, receiver_id)}${Math.min(user_id, receiver_id)}`;
            const encodedKey = encodeString(key);
            const encodedMessage = encodeString(message);

            // Assume HMAC key needs to be 32 bytes; adjust or pad as needed
            const hmacKey = new Uint8Array(32);
            hmacKey.set(encodedKey.slice(0, 32));

            // Compute HMAC
            return window.jschmac.compute(hmacKey, encodedMessage, "SHA-256");
        }
    }

    // Function to verify HMAC
    async function verify_hmac(message, mac) {
        if (is_group_chat) {
            const chat_ids = await fetchchatids();
            const sorted_chat_ids = chat_ids.sort();
            const key = sorted_chat_ids.join("");
            const encodedKey = encodeString(key);
            const encodedMessage = encodeString(message);

            // Assume HMAC key needs to be 32 bytes; adjust or pad as needed
            const hmacKey = new Uint8Array(32);
            hmacKey.set(encodedKey.slice(0, 32));

            // Verify HMAC
            return window.jschmac.verify(hmacKey, encodedMessage, mac, "SHA-256");
        }

        else {
            const receiver = current_receiver;
            const user_id = await fetchUserid(username);
            const receiver_id = await fetchUserid(receiver);
            const key = `${Math.max(user_id, receiver_id)}${Math.min(user_id, receiver_id)}`;
            const encodedKey = encodeString(key);
            const encodedMessage = encodeString(message);

            // Assume HMAC key needs to be 32 bytes; adjust or pad as needed
            const hmacKey = new Uint8Array(32);
            hmacKey.set(encodedKey.slice(0, 32));

            // Verify HMAC
            return window.jschmac.verify(hmacKey, encodedMessage, mac, "SHA-256");
        }
    }

    function open_chat(friend, group_chat) {
        leave();
        is_group_chat = group_chat;
        join_room(friend);
    }

    // we emit a join room event to the server to join a room
    function join_room(friend) {
        current_receiver = friend;  //sets receiver to the friend you clicked on
        //pass in the receiver of our message to the server as well as the current user's username
        socket.emit("join", username, current_receiver, is_group_chat, (res) => {

            // returns an error message if the server returns an error
            if (res.error_code) {
                alert(res.error_message + " - Error code: " + res.error_code);
                return;
            }

            // set the room id variable to the room id returned by the server
            // now we'll show the input box, so the user can input their message
            document.getElementById("chatting_to").innerHTML = "Chatting to: " + friend;    //updates the chatting to box
            $("#input_box").show();
            if (is_group_chat) {
                $("#add_friend_button").show();
            } else {
                $("#add_friend_button").hide();
            }
        });
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        current_receiver = "";
        is_group_chat = false;
        socket.emit("leave", username);
        document.getElementById("chatting_to").innerHTML = "Chatting to: No one at the moment !";
        $("#input_box").hide();
        $("#message_box").empty();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client

    async function add_message_sys(message, color) {
        let box = $("#message_box");
        // Replace newline characters with <br> tags
        message = message.replace(/\n/g, '<br>');
        // Use .html() instead of .text() to interpret the <br> tags
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).html(message);
        box.append(child);
    }

    // Logout functions
    async function logout() {
        // Redirect to the logout rout
        socket.emit("user_disconnect", username, function(response) {
            if (response) {
                window.location.href = "/logout";
            }
        });
    }


    async function add_friend_request() {
        let friend = prompt("Enter the name of the friend you want to add:");
        friend = encodeURI(friend);
        try {
            friend_id = await fetchUserid(friend);
            user_id = await fetchUserid(username);
        } catch(error) {
            console.error("Error in fetching user id:", error);
        }
        if (user_id) {
            socket.emit("add_friend_request", user_id, friend_id);
        }
    }

    //sends requests to the server for these functionalities
    function add_friend(friend) {
        socket.emit("add_friend", username, friend);
    }

    function remove_request(friend) {
        socket.emit("remove_request", username, friend);
    }

    function reject_request(friend) {
        socket.emit("reject_request", username, friend);
    }

    //dynamically updates html to do with friends
    function updateIncomingRequests(requests) {
        const container = document.querySelector('.Incoming_Friends_Request');
        container.innerHTML = '<h2>Friend Requests</h2>';  // Clear content and add header
        if (!requests.length) {
            container.innerHTML += '<p>No friend requests yet!</p>';
        } else {
            requests.forEach(request => {
                container.innerHTML += `<div class="button-container">
                    <button class="List_friend_button">- ${request}</button> 
                    <button class="Accept_button" onclick="add_friend('${request}')">Accept</button>
                    <button class="Cancel_button" onclick="reject_request('${request}')">Decline</button>
                </div>`;
            });
        }
    }

    function updateOutgoingRequests(requests) {
        const container = document.querySelector('.Outgoing_Friends_Request');
        container.innerHTML = '<h2>Friend Requests Sent</h2>';  // Clear content and add header
        if (!requests.length) {
            container.innerHTML += '<p>No friend requests sent!</p>';
        } else {
            requests.forEach(request => {
                container.innerHTML += `<div class="button-container">
                    <button class="List_friend_button">- ${request}</button>
                    <button class="Cancel_button" onclick="remove_request('${request}')">Cancel Request</button>
                </div>`;
            });
        }
    }

    async function getonlinestatus(friend) {
        try {
            const response = await fetch(`/api/users/${friend}/getonlinestatus`, {
                method: "GET"
            });
            const data = await response.json();
            return data.online_status;
        } catch (error) {
            console.error("Fetching user id failed:", error);
        }
    }

    async function updateFriendsList(friends) {
        const container = document.querySelector('.Friends');
        container.innerHTML = '<h2>Friends List</h2>';  // Clear content and add header
        if (!friends.length) {
            container.innerHTML += '<p>No friends yet!</p>';
        } else {
            for (let friend of friends) {
                let online_status = await getonlinestatus(friend);
                console.log(friend, online_status);
                let friend_role = await fetchUserRole(friend);
                let onlineDot = online_status ? '<span class="online-dot"></span>' : '';
                container.innerHTML += `<div class="button-container">
                ${onlineDot}
                <button onclick="open_chat('${friend}', false)" class="Friends_button">${friend} - ${friend_role}</button>
                <button class="Cancel_button" onclick="remove_friend('${friend}')">Remove</button>
            </div>`;
            }
        }
        container.innerHTML += '<button onclick="add_friend_request()">Add Friend</button>';
    }

    function fetchUserRole(friend) {
        return fetch(`/api/users/${friend}/get_user_role`, {
            method: "GET"
        }).then(response => response.json())
        .then(data => data.user_role)
        .catch(error => console.error("Fetching user role failed:", error));
    }
    
    function updateGroupChats(chats) {
        const container = document.querySelector('.Group_chats');
        container.innerHTML = '<h2>Group Chats</h2>'; 
        if (!chats.length) {
            container.innerHTML += '<p>No group chats yet!</p>';
        } else {
            chats.forEach(chat => {
                container.innerHTML += `<div class="button-container">
                    <button onclick="open_chat('${chat}', true)" class="Friends_button">${chat}</button>
                    <button onclick="leave_group_chat('${chat}')" class="Cancel_button">Leave Chat</button>
                </div>`;
            });
        }
        container.innerHTML += '<button onclick="make_group_chat()">Make Group Chat</button>';
    }

    async function make_group_chat() {
        let chat_name = prompt("Enter the name of the group chat:");
        // Check chat name is not taken
        let data = await fetchchatnames();
        console.log(data);
        if (data.chat_names.includes(chat_name)) {
            alert("Chat name already taken. Please choose another name.");
            return;
        }
        let users = prompt("Enter all users in the group chat separated by commas:").split(",");
        try {
            user_id = await fetchUserid(username);
        } catch(error) {
            console.error("Error in fetching user id:", error);
        }
        if (user_id) {
            socket.emit("make_group_chat", user_id, chat_name, users);
        }
    }

    async function fetchchatusernames() {
        try {
            const response = await fetch(`/api/users/${current_receiver}/fetchchatusernames`, {
                method: "GET"
            });
            const data = await response.json();
            return data.chat_usernames;
        } catch (error) {
            console.error("Fetching user id failed:", error);
        }
    }

    async function fetchchatnames() {
        try {
            const response = await fetch(`/api/users/fetchchatnames`, {
                method: "GET"
            });
            const data = await response.json();
            return data
        } catch (error) {
            console.error("Fetching user id failed:", error);
        }
    }

    async function fetchchatids() {
        try {
            const response = await fetch(`/api/users/${current_receiver}/fetchchatuserids`, {
                method: "GET"
            });
            const data = await response.json();
            return data.chat_ids
        } catch (error) {
            console.error("Fetching user ids failed:", error);
        }
    }

    async function add_friend_to_group() {
        let friend = prompt("Enter the name of the friend you want to add to the group chat:");
        try {
            friend_id = await fetchUserid(friend);
        } catch(error) {
            console.error("Error in fetching user id:", error);
        }
        convo_id = current_receiver + "-GroupChat"
        socket.emit("add_friend_to_group", friend_id, convo_id);
    }

    function leave_group_chat(chat_name) {
        is_group_chat = false;
        socket.emit("leave_group_chat", chat_name);
    }

    function remove_friend(friend) {
        socket.emit("remove_friend", username, friend);
    }

    function mute_user(mute_type) {
        if (mute_type === 'mute') {
            var mute_type = 'mute';
            var user_to_mute = prompt("Enter the username of the user you would like to mute:");
        } else {
            var mute_type = 'unmute';
            var user_to_mute = prompt("Enter the username of the user you would like to unmute:");
        }
        if (user_to_mute) {
            socket.emit('mute_user', user_to_mute, mute_type, function(response) {
                alert(response);
            });
        }
    }


</script>
{% endblock %}