<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %} 
    <h1>Sign Up</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password" type="password"/>
    <button onclick="signup()">Sign up</button>

    <script>
         function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        function isValidPassword(password) {
            // At least 8 characters long, 1 uppercase, 1 lowercase, 1 number, 1 special character
            const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
            return regex.test(password);
        }

        // this function is identical to login(), see login.jinja
        async function signup() {

            let loginURL = "{{ url_for('signup_user') }}";

            let password = $("#password").val();
            password = password.replace(/\s/g, '');

            // checks if the inputted password matches the password requirements
            if (!isValidPassword(password)) {
                alert("Invalid password. Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one number, and one special character.");
                return;
            }
            password = password.hashCode(); //password is hashed

            //inputs are escaped
            let username = encodeURIComponent($("#username").val());
            password = encodeURIComponent(password);

            //inputs are passed to the server
            let res = await axios.post(loginURL, {
                username: username,
                password: password
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            //creates a passphrase by concatenating the password and username, ensures that the passphrase is unique to the user, then hashes for security
            var revpas = password;
            var user = username;
            var passphrase = revpas + user;
            //passphrase = String(passphrase.hashCode());

            //generates a keypair and sends the public key to the server
            await generateAndSendKeyPair(passphrase, user);

            //generates the private key as a RSAKey object
            const privkey = cryptico.generateRSAKey(passphrase, 2048);
            const serial_privkey = exportRSAKey(privkey);   //exports the private key as a string
            await storeRSAKey(serial_privkey, passphrase);  //stores the private key in the IndexedDB
            await addData(passphrase);  //adds the passphrase to the IndexedDB

            window.open(res.data, "_self")  //opens the home page corresponding to the user
        }
    </script>
{% endblock %}